// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC721/ERC721.sol";

import "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol";
import "@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol";
import "@openzeppelin/contracts/token/ERC721/extensions/ERC721Pausable.sol";
import "@openzeppelin/contracts/access/AccessControlEnumerable.sol";
import "@openzeppelin/contracts/utils/Context.sol";
import "@openzeppelin/contracts/utils/Counters.sol";
import "@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol";
import "@openzeppelin/contracts/access/Ownable.sol";


/**
 * @dev {ERC721} token, including:
 *
 *  - ability for holders to burn (destroy) their tokens
 *  - a minter role that allows for token minting (creation)
 *  - a pauser role that allows to stop all token transfers
 *  - token ID and URI autogeneration
 *
 * This contract uses {AccessControl} to lock permissioned functions using the
 * different roles - head to its documentation for details.
 *
 * The account that deploys the contract will be granted the minter and pauser
 * roles, as well as the default admin role, which will let it grant both minter
 * and pauser roles to other accounts.
 */

interface IERC721ArtArmy is IERC721Enumerable {

    /**
     * @dev Returns the Artis Wallet of The  NFT.
     */
    function getArtistWallet(uint256 tokenId) external view returns (address);
    function getArtistRoyalty(uint256 _tokenId) external view returns (uint256);

}



contract ArtArmyArtwork is

    Context,

    AccessControlEnumerable,

    ERC721Enumerable,
    ERC721Burnable,
    ERC721Pausable,
    Ownable

{
    using Counters for Counters.Counter;
    using Strings for uint256;


    bytes32 public constant MINTER_ROLE = keccak256("MINTER_ROLE");
    bytes32 public constant PAUSER_ROLE = keccak256("PAUSER_ROLE");

    Counters.Counter private _tokenIdTracker;

    string private _baseTokenURI;
    uint256 private _maximumRoyaltyInBasisPoints;

    address _auctionContract;
    address _sellerContract;

    struct Artist {
        address wallet;
        uint256 royaltyInBasisPoints;
    }

    // Artist of NFT
    mapping (uint256 => Artist) private _tokenArtists;

    /**
     * @dev Grants `DEFAULT_ADMIN_ROLE`, `MINTER_ROLE` and `PAUSER_ROLE` to the
     * account that deploys the contract.
     *
     * Token URIs will be autogenerated based on `baseURI` and their token IDs.
     * See {ERC721-tokenURI}.
     */
    constructor(
        string memory name,
        string memory symbol,
        string memory baseTokenURI,
        uint256 maximumRoyaltyInBasisPoints,
        address auctionContract,
        address sellerContract

    ) ERC721(name, symbol) {
        _baseTokenURI = baseTokenURI;
        _maximumRoyaltyInBasisPoints = maximumRoyaltyInBasisPoints;

        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());

        _setupRole(MINTER_ROLE, _msgSender());
        _setupRole(PAUSER_ROLE, _msgSender());

        // Address of auction contract
        _auctionContract = auctionContract;
        // Address of fixed sales contract
        _sellerContract = sellerContract;
    }

    /**
    * @dev Returns auction contract address.
    */
    function getAuctionContract() public view returns (address) {
        return _auctionContract;
    }

    /**
    * @dev Returns fixed sales contract address.
    */
    function getSellerContract() public view returns (address) {
        return _sellerContract;
    }

    /**
    * @dev Set the auction contract address.
    */
    function setAuctionContract(address auctionContract) external returns (bool) {
        require(address(msg.sender) == address(owner()), "Only the owner can call this function");
        _auctionContract = auctionContract;
        return true;
    }

    /**
    * @dev Set the fixed sales contract address.
    */
    function setSellerContract(address sellerContract) external returns (bool) {
        require(address(msg.sender) == address(owner()), "Only the owner can call this function");
        _sellerContract = sellerContract;
        return true;
    }


    function _baseURI() internal view virtual override returns (string memory) {
        return _baseTokenURI;
    }

    /**
    * @dev Returns the maximum Royalty in Basis Points that an artist can be set in basis points.
    */
    function getMaximumRoyaltyInBasisPoints() public view returns (uint256) {
        return _maximumRoyaltyInBasisPoints;
    }

    /**
    * @dev Set the maximum Royalty in Basis Points that an artist can be set in basis points.
    */
    function setMaximumRoyaltyInBasisPoints(uint256 maximumRoyaltyInBasisPoints) external returns (bool) {
        require(hasRole(DEFAULT_ADMIN_ROLE, _msgSender()), "Only the admin can call this function");
        _maximumRoyaltyInBasisPoints = maximumRoyaltyInBasisPoints;
        return true;
    }

    /**
     * @dev Creates a new token for `to`. Its token ID will be automatically
     * assigned (and available on the emitted {IERC721-Transfer} event), and the token
     * URI autogenerated based on the base URI passed at construction.
     *
     * See {ERC721-_mint}.
     *
     * Requirements:
     *
     * - the caller must have the `MINTER_ROLE`.
     */
    function mint(address to, string memory URI, address _artistWallet, uint256 _royaltyInBasisPoints) public virtual {
        require(hasRole(MINTER_ROLE, _msgSender()), "ERC721PresetMinterPauserAutoId: must have minter role to mint");

        // We cannot just use balanceOf to create the new tokenId because tokens
        // can be burned (destroyed), so we need a separate counter.
        _mint(to, _tokenIdTracker.current());

        _setTokenURI(_tokenIdTracker.current(), URI);
        _setTokenArtist(_tokenIdTracker.current(), _artistWallet, _royaltyInBasisPoints);

        _tokenIdTracker.increment();
    }

    /**
     * @dev Pauses all token transfers.
     *
     * See {ERC721Pausable} and {Pausable-_pause}.
     *
     * Requirements:
     *
     * - the caller must have the `PAUSER_ROLE`.
     */
    function pause() public virtual {
        require(hasRole(PAUSER_ROLE, _msgSender()), "ERC721PresetMinterPauserAutoId: must have pauser role to pause");
        _pause();
    }

    /**
     * @dev Unpauses all token transfers.
     *
     * See {ERC721Pausable} and {Pausable-_unpause}.
     *
     * Requirements:
     *
     * - the caller must have the `PAUSER_ROLE`.
     */
    function unpause() public virtual {
        require(hasRole(PAUSER_ROLE, _msgSender()), "ERC721PresetMinterPauserAutoId: must have pauser role to unpause");
        _unpause();
    }

    function _beforeTokenTransfer(
        address from,
        address to,
        uint256 tokenId
    ) internal virtual override(ERC721, ERC721Enumerable, ERC721Pausable) {
        super._beforeTokenTransfer(from, to, tokenId);
    }

    /**
     * @dev See {IERC165-supportsInterface}.
     */
    function supportsInterface(bytes4 interfaceId)
    public
    view
    virtual
    override(AccessControlEnumerable, ERC721, ERC721Enumerable)
    returns (bool)
    {
        return super.supportsInterface(interfaceId);
    }

    /**
     * @dev Set Artist of the NFT.
     *
     * Requirements:
     * - `tokenId` must exist.
     * -
     */
    function _setTokenArtist(uint256 tokenId, address _wallet, uint256 _royaltyInBasisPoints ) internal virtual {
        require(_exists(tokenId), "ERC721Artist: Artist set of nonexistent token");
        require(_royaltyInBasisPoints < _maximumRoyaltyInBasisPoints , "ERC721Artist: Royalty needs to be less than maximumRoyaltyInBasisPoints");

        _tokenArtists[tokenId].wallet = _wallet;
        _tokenArtists[tokenId].royaltyInBasisPoints = _royaltyInBasisPoints;

    }


    function getArtistWallet(uint256 _tokenId) public view returns (address){
        return _tokenArtists[_tokenId].wallet;
    }

    function getArtistRoyalty(uint256 _tokenId) public view returns (uint256){
        return _tokenArtists[_tokenId].royaltyInBasisPoints;
    }



    // Optional mapping for token URIs
    mapping(uint256 => string) private _tokenURIs;

    /**
     * @dev See {IERC721Metadata-tokenURI}.
     */
    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
        require(_exists(tokenId), "ERC721URIStorage: URI query for nonexistent token");

        string memory _tokenURI = _tokenURIs[tokenId];
        string memory base = _baseURI();

        // If there is no base URI, return the token URI.
        if (bytes(base).length == 0) {
            return _tokenURI;
        }
        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).
        if (bytes(_tokenURI).length > 0) {
            return string(abi.encodePacked(base, _tokenURI));
        }

        return super.tokenURI(tokenId);
    }

    /**
     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.
     *
     * Requirements:
     *
     * - `tokenId` must exist.
     */
    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {
        require(_exists(tokenId), "ERC721URIStorage: URI set of nonexistent token");
        _tokenURIs[tokenId] = _tokenURI;
    }

    /**
     * @dev Destroys `tokenId`.
     * The approval is cleared when the token is burned.
     *
     * Requirements:
     *
     * - `tokenId` must exist.
     *
     * Emits a {Transfer} event.
     */
    function _burn(uint256 tokenId) internal virtual override {
        super._burn(tokenId);

        if (bytes(_tokenURIs[tokenId]).length != 0) {
            delete _tokenURIs[tokenId];
        }
    }

    /**
   * Override isApprovedForAll to auto-approve OS's proxy contract
   */
    function isApprovedForAll(
        address _owner,
        address _operator
    ) public override view returns (bool isOperator) {
        // if Contracts ERC721 Proxy Address is detected, auto-return true
        if (_operator == address(_auctionContract) || _operator == address(_sellerContract)) {
            return true;
        }

        // otherwise, use the default ERC721.isApprovedForAll()
        return ERC721.isApprovedForAll(_owner, _operator);
    }

}
